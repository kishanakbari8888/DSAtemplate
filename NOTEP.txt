#include<bits/stdc++.h>
#include <stdio.h>
#include "string.h"
using namespace std;

int Partition(vector<int> &v, int r, int l)
{
    int pivot = v[l];
    int pIndex = r;
    
    for(int i = r;i<l;i++)
    {
        if(v[i]<pivot)
        {
            int temp = v[i];
            v[i] = v[pIndex];
            v[pIndex] = temp;
            pIndex++;
        }  
    }
    
    int temp = v[l];
    v[l] = v[pIndex];
    v[pIndex] = temp;
 
 return pIndex;
}
 
void QuickSort(vector<int> &v, int r, int l)
{
    if(r<l)
    {
        int p = Partition(v,r, l);
        QuickSort(v, r, (p-1));  
        QuickSort(v, (p+1), l);  
    }
}


void countSort(vector<int> &v,int exp)
{
    vector<int> ans(v.size()); 
    int count[10] = {0};

    for (int i = 0; i < v.size(); i++)
        count[(v[i] / exp) % 10]++;
 

    for (int i = 1; i < 10; i++)
        count[i] += count[i - 1];

 
    for (int i = v.size() - 1; i >= 0; i--) {
        ans[count[(v[i] / exp) % 10]-1] = v[i];
        count[(v[i] / exp) % 10]--;
    }
 
    for (int i = 0; i < v.size(); i++)
        v[i] = ans[i];
}

void radixsort(vector<int> &v)
{
    int m = *max_element(v.begin(),v.end());
    int ex = 1;
    while(ex<=m)
    {
        countSort(v,ex);
        ex*=10;
    }
}
 
 
int32_t main()
{
 
    int n; cin>>n;
    
    vector<int> v(n);     
    for(int i=0; i<n; i++)
    {
        cin>>v[i];
    }

    QuickSort(v,0,(n-1));  
    print(v);

// ---------------------------------------------------------------------------------------------------------------------------------------------------------
    cout<<endl;
// ---------------------------------------------------------------------------------------------------------------------------------------------------------
    cout<<endl;
// ---------------------------------------------------------------------------------------------------------------------------------------------------------
 
    radixsort(v);
    print(v);






    return 0;
}